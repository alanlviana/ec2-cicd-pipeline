name: 03-Deploy to Production

on:
  pull_request:
    types: [labeled, unlabeled, opened, synchronize, edited]
    branches:
      - 'main'    
  
permissions:
  pull-requests: write
  id-token: write
  contents: write


jobs:
  check-label:
    name: Check 'ready-to-deploy' label
    runs-on: ubuntu-latest
    steps:
      - name: Check for 'ready-to-deploy' label
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'ready-to-deploy') }}
        run: |
          echo "Error: The pull request does not have the 'ready-to-deploy' label."
          exit 1

  release-management:
    name: Release Management
    needs: check-label
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
         
      - uses: actions-tools/yaml-outputs@v2
        id: config
        with:
          file-path: 'config-pipeline.yml'
          
      - name: Get latest version
        id: get_version
        run: |
          BRANCH_NAME=$(echo ${{ github.head_ref }})
          VERSION=$(echo $BRANCH_NAME | sed -n 's/release\/\([0-9]*\.[0-9]*\.[0-9]*\)/\1/p')
          echo "VERSION: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}


  deploy-to-production:
    name: "[PROD] Deployment"
    needs: release-management
    uses: ./.github/workflows/deploy-ec2-terraform.yml
    with:
      environment: prod
      s3-key: ${{  needs.release-management.outputs.VERSION  }}

  create-release:
    name: Create Release
    needs: 
      - deploy-to-production
      - release-management
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check if Release Exists
        id: check_release
        run: |
          if gh release view "${{ needs.release-management.outputs.VERSION }}"; then
            echo "Release already exists."
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a Release
        if: steps.check_release.outputs.release_exists == 'false'
        uses: elgohr/Github-Release-Action@v5
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: Release ${{ needs.release-management.outputs.VERSION }}
          tag: ${{ needs.release-management.outputs.VERSION }}
          prerelease: false

      - name: Close Pull Request
        run: gh pr merge ${{ github.event.pull_request.number }} --merge --delete-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}